#!/usr/bin/env php
<?php
/**
 * This is a cli script to create groupoffice components quickly.
 * It's definitely NOT safe to pass random data to it, but since it's cli,
 * that won't happen anyway
 */
require(__DIR__.'/vendor/autoload.php');

/**
 * Custom twig filter for snake_case
 */
class TwigSnakeCase extends Twig_Extension {
    public function getFilters() {
        return array(
            'snake' => new Twig_Filter_Method($this, 'snakeFilter')
        );
    }

    public function snakeFilter($value) {
        if(!is_string($value)) {
            return $value;
        }

        $return = array();
        foreach(str_split($value) as $char) {
            if($char == ' ') {
                $return[] = '_';
            } elseif(ctype_upper($char)) {
                if(count($return) != 0) {
                    $return[] = '_';
                }
                $return[] = strtolower($char);
            } else {
                $return[] = $char;
            }
        }
        return implode('', $return);
    }

    public function getName() {
        return 'snake_twig_extension';
    }
}

// Twig setup
$loader = new Twig_Loader_Filesystem(__DIR__.'/templates');
$twig = new Twig_Environment($loader, array(
    'cache' => '/tmp/twig21256443/'
));
$twig->addExtension(new TwigSnakeCase());

$cwd = array_reverse(explode(DIRECTORY_SEPARATOR, getcwd()));

/**
 * Show the user something sensible on error
 */
function print_error($e) {
    $usage = <<<'EOT'
Usage: go-admin type name

    type        The type of object to create (one of module, model, controller)
    name        The name of the object to create

The module type will create a folder for the new module, and all other
types will expect you to be in the module root directory or in the directory
where the file(s) will be created.
EOT;
    echo 'Error: '.$e->getMessage()."\n";
    echo $usage."\n";
}

function mkdir_neat($path, $mode=0777, $recursive=false) {
    if(file_exists($path)) {
        throw new Exception("Trying to create directory that already exists,".
            " stopping execution");
    }
    mkdir($path, $mode, $recursive);
}

function create_module($name, $twig, $cwd) {
    $path = $name.'/module';
    mkdir_neat($path, 0755, true);
    $template = $twig->loadTemplate('module.php.twig');
    file_put_contents($path.'/'.ucfirst($name).'Module.php',
        $template->render(array('name' => $name)));
    foreach(array(
        'install', 'views/Extjs3', 'model', 'controller', 'language'
    ) as $subdir) {
        mkdir_neat($path.'/'.$subdir, 0755, true);
    }
    foreach(array(
        'install/updates.php', 'language/en.php'
    ) as $blank_php_file) {
        file_put_contents($path.'/'.$blank_php_file, "<?php\n");
    }
    file_put_contents($name.'/README.md', "# $name\nWrite install instructions"
        ." etc. here");
}

function create_model($name, $twig, $cwd) {
    $fname = '';
    if('model' == $cwd[0]) {
        if($cwd[1] == 'module') {
            $module = $cwd[2];
        } else {
            $module = $cwd[1];
        }
    } else {
        if(!is_dir('./model')) {
            throw new Exception("Cannot find 'model' directory");
        }
        $fname .= 'model/';
        $module = $cwd[0];
    }
    $fname .= ucfirst($name.'.php');
    $template = $twig->loadTemplate('model.php.twig');
    file_put_contents($fname, $template->render(array(
        'name' => $name,
        'module' => $module
    )));
}

function create_controller($name, $twig, $cwd) {
}

try {
    if(count($argv) < 3) {
        throw new Exception("Not enough arguments");
    }
    switch($argv[1]) {
    case 'module':
        create_module($argv[2], $twig, $cwd);
        break;
    case 'model':
        create_model($argv[2], $twig, $cwd);
        break;
    case 'controller':
        create_controller($argv[2], $twig, $cwd);
        break;
    default:
        throw new Exception("Unrecognised type");
        break;
    }

} catch (Exception $e) {
    print_error($e);
}
